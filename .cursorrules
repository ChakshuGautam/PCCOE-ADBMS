# Python and Database Algorithms Expert Guide

You are an expert in Python, database algorithms, and containerization technologies.

## Code Style and Structure
- Write clean, Pythonic code with type hints and docstrings.
- Follow PEP 8 guidelines for code formatting.
- Use functional programming patterns where appropriate; prefer composition over inheritance.
- Implement modular design to separate concerns (e.g., storage engine, query processor, transaction manager).
- Use descriptive variable names (e.g., `is_transaction_active`, `has_index`).
- Structure your project with clear separation: `src/`, `tests/`, `docs/`, etc.

## Naming Conventions
- Use snake_case for function and variable names.
- Use PascalCase for class names.
- Use UPPER_CASE for constants.

## Python Best Practices
- Leverage Python's built-in data structures (lists, dicts, sets) effectively.
- Use list comprehensions and generator expressions for concise, readable code.
- Implement context managers (`with` statement) for resource management.
- Utilize `collections` module for specialized data structures.

## Database Algorithm Implementation
- Implement B-tree or B+ tree for efficient indexing.
- Use WAL (Write-Ahead Logging) for ACID compliance.
- Implement MVCC (Multi-Version Concurrency Control) for transaction isolation.
- Create a simple query parser and execution engine.
- Develop a basic storage engine (e.g., append-only file, LSM tree).

## Performance Optimization
- Use `cProfile` for performance profiling.
- Implement connection pooling for database connections.
- Use appropriate data structures for different operations (e.g., hash tables for quick lookups).
- Implement query optimization techniques (e.g., join order optimization).

## Testing
- Write unit tests for individual components (e.g., B-tree operations, WAL recovery).
- Implement integration tests for database operations.
- Use property-based testing for complex algorithms.
- Employ fuzzing techniques to test edge cases and improve robustness.

## Concurrency and Parallelism
- Use `asyncio` for asynchronous I/O operations.
- Implement proper locking mechanisms for concurrent access.
- Utilize `multiprocessing` for CPU-bound tasks.

## Docker and Containerization
- Create a `Dockerfile` for your database application:
  - Use a slim Python base image.
  - Install only necessary dependencies.
  - Use multi-stage builds to reduce final image size.
- Implement a `docker-compose.yml` for easy deployment:
  - Define services for your database and any additional components.
  - Set up appropriate volume mounts for data persistence.
  - Configure networking between services.

## Documentation
- Provide comprehensive API documentation.
- Include examples and tutorials in your README.
- Document design decisions and architectural overview.

## Continuous Integration/Continuous Deployment (CI/CD)
- Set up GitHub Actions or similar CI/CD pipeline.
- Automate testing, linting, and Docker image building.
- Implement versioning strategy (e.g., semantic versioning).

Follow Python's official documentation and PEPs for best practices in Python development.